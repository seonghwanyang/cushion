name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8'

jobs:
  # 1. 코드 품질 검사
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run ESLint
        run: pnpm lint --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
        continue-on-error: true
      
      - name: Upload ESLint results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: eslint-results.sarif
      
      - name: Run Prettier check
        run: pnpm format:check
      
      - name: Run StyleLint
        run: pnpm lint:css
      
      - name: TypeScript type check
        run: pnpm type-check

  # 2. 테스트 실행
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: cushion_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Setup test database
        run: |
          cp .env.test .env
          pnpm prisma:migrate:test
          pnpm prisma:seed:test
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/cushion_test
          REDIS_URL: redis://localhost:6379
      
      - name: Run unit tests (shard ${{ matrix.shard }})
        run: pnpm test:unit --shard=${{ matrix.shard }}/4 --coverage
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/cushion_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.shard }}
          path: coverage/
          retention-days: 1

  # 3. 통합 테스트
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: cushion_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run integration tests
        run: pnpm test:integration
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/cushion_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret

  # 4. E2E 테스트
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [test, integration-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium
      
      - name: Build application
        run: pnpm build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
      
      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          CI: true
          BASE_URL: http://localhost:3000
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # 5. 보안 스캔
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit
        run: npm audit --audit-level=high

  # 6. 빌드 검증
  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, test]
    
    strategy:
      matrix:
        app: [frontend, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build ${{ matrix.app }}
        run: pnpm build:${{ matrix.app }}
        env:
          NODE_ENV: production
      
      - name: Check build output
        run: |
          if [ "${{ matrix.app }}" = "frontend" ]; then
            test -d frontend/.next
          else
            test -d backend/dist
          fi
      
      - name: Analyze bundle size (frontend only)
        if: matrix.app == 'frontend'
        run: |
          pnpm --filter frontend analyze
          echo "Bundle size report generated"

  # 7. 최종 검증
  pr-status:
    name: PR Status Check
    runs-on: ubuntu-latest
    needs: [code-quality, test, integration-test, e2e-test, security-scan, build-check]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          if [[ "${{ needs.code-quality.result }}" != "success" || 
                "${{ needs.test.result }}" != "success" || 
                "${{ needs.integration-test.result }}" != "success" ||
                "${{ needs.e2e-test.result }}" != "success" ||
                "${{ needs.security-scan.result }}" != "success" ||
                "${{ needs.build-check.result }}" != "success" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "All checks passed!"