name: Deploy to Staging

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8'

jobs:
  # 1. 빌드 및 테스트
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    outputs:
      frontend-url: ${{ steps.frontend-deploy.outputs.url }}
      backend-url: ${{ steps.backend-deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run tests
        run: pnpm test:ci
      
      - name: Build applications
        run: pnpm build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}

  # 2. 데이터베이스 마이그레이션
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run migrations
        run: |
          cd backend
          pnpm prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

  # 3. Frontend 배포 (Vercel)
  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: database-migration
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          alias-domains: staging.cushion.app

  # 4. Backend 배포 (Railway/AWS)
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: database-migration
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      
      - name: Build Docker image
        run: |
          docker build -t cushion-backend:${{ github.sha }} ./backend
          docker tag cushion-backend:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/cushion-backend:staging
          docker tag cushion-backend:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/cushion-backend:${{ github.sha }}
      
      - name: Push to ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          docker push ${{ secrets.ECR_REGISTRY }}/cushion-backend:staging
          docker push ${{ secrets.ECR_REGISTRY }}/cushion-backend:${{ github.sha }}
      
      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster cushion-staging \
            --service cushion-backend \
            --force-new-deployment

  # 5. 스모크 테스트
  smoke-test:
    name: Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [deploy-frontend, deploy-backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Wait for deployment
        run: sleep 60
      
      - name: Run smoke tests
        run: |
          cd e2e
          pnpm install
          pnpm test:smoke
        env:
          BASE_URL: https://staging.cushion.app
          API_URL: https://api-staging.cushion.app

  # 6. 알림
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend, smoke-test]
    if: always()
    
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Staging Deployment ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Frontend: https://staging.cushion.app
            Backend: https://api-staging.cushion.app
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}